Her C programinda #include <stdio.h> kütüphanesi en üste yazilmalidir.

main methodun mutlaka bulunmasi gerekiyor ve bittigini göstermek icin return olmali. 
  int main(){ 
  .......
  return 0;
  }
  
konsolda yazdirmak icin printf, kapanmasini önlemek icin ise getchar kullaniyoruz.;
    printf("hello World");
    getchar();

Bir alt satira gecmek icin; \n
  printf("hello World\n");

yorum satiri icin;
  //tek satir
  /*cok
  Satir*/

Veri tam sayi ise;
  int i = 10;               4 byte 32bit
  short int si = 20;        2 byte
  long int li= 30;          8 byte
kapladigi yere göre deger alirlar.

Veri virgüllü bir sayi ise;
  double d = 3.14;          8 byte
    büyük ondalik sayilar icin double kullanilir. 8 byte
  float f =2.12;

Karakter veri tipi icin;
  char c = 'A';             1 byte

FORMAT BELIRLEYICILER

  tam sayi yazdirmak istersek "%d" yazmamiz lazim - desimal manasina gelir.
  printf("%d", i);
  
  ondalik sayilari yazdirmak icin "%f" kullaniriz.
  printf("%f", d);
  
  Eger virgülden sonra sadece 2 basamak olsun istersek;
   printf("%.2f", d);
  
  char karakterini yazdirmak istersek;
   printf("%c", c);
   
  Eger art arda yazdirmak istersek;
   printf("%d, %f, %c", i, d, c);
  
  Eger kac byte kapladigini görmek istersek;
   printf("%d byte", sizeof(int));
   
MATEMATIKSEL ISLEMLER

  printf("%d", 10 + 4);     //14
  printf("%d", 10 - 4);     //6
  printf("%d", 10 * 4);     //40
  printf("%d", 10 / 4);     //2 tam bölünmesini isteseydik %f ve bir tanesini float bir deger yazmaliydik.
  printf("%d", 10 % 4);     //2 kalani verir
  
TYPE CASTING

char- short- int- float- double
  int float a dönebilir lakin tessi icin islem gerekir.
  
    printf("%f", 10 + 4.2)      //14.2
    printf("%d", (int)4.2);     //4
    
KISA YAZIMLAR

  a = a + 2; yerine
  a += 2;    yazabiliriz.
  
  a = a + 1; yerine
  a++; yazabiliriz.
  
POSTFIX-PREFIX

  a--; Podtfix
  --a; Prefix
  
KULLANIICIDAN INPUT ALMA

  öncelikle bir tür ve isim belirleyip atama yapmiyoruz.
  scanner ile ampersand(und) isaretiyle yazilacak yeri gösteriyoruz.
  
  int a;
  scanf_s("%d", &a);
  
  kullanicinni girdigi degeri görmek icin ise;
  printerf("%d",  a);
  
  *Scanner kullandigimiz icin programin kapanmasini önlemek amaciyla yeni bir  getchar(); daha yazmamiz gerekir.
  
  istersen birdden fazla da input alabilirdik;
  int a, b, c;
  scanf_s("%d, %d, %d", &a, &b, &c);
  
  *kullanici istenilen birden fazla degeri girerken enter yerine space tusuna da basabilir.
  
  eger aldigimiz degerleri toplayip yazdirmak istersek;
  printf("%d", a + b + c);
  
KARSILASTIRMA OPERATORLERI
  
  1 true 
  0 false ifade eder;
  
  printf("%d", 3 < 4);    //1     yani dogru oldugunu ifade eder. kücük
  printf("%d", 3 > 4);    //0         yanlis oldugunu ifade eder. büyük
  printf("%d", 3 == 4);   //0         yanlis oldugunu ifade eder. esit
  printf("%d", 3 != 4);    //1        dogru oldugunu ifade eder. esit degil
  printf("%d", 3 >= 4);    //0        yanlis oldugunu ifade eder. büyük veya esit
  printf("%d", 3 <= 4);    //1        dogru oldugunu ifade eder. kücük veya esit
  
MANTIKSAL BAGLACLAR
  
   1 true 
   0 false ifade eder;
   iki sartli durumlarda kullanilir:
   
    printf("%d", (3 < 4) && (4 == 4));    //1     yani dogru oldugunu ifade eder. iki taraf da true olmak zorundadir. AND
    printf("%d", (3 < 4) || (4 == 5));    //1     dogru oldugunu ifade eder. cünkü 1 tarafin dogru olmasi yeterlidir. OR
    printf("%d", ! (3 < 4));              //0     yanlis oldugunu ifade eder. durumun tam tersine cevirir.            NOT
    
KOSUL DURUMLARI

  IF, ELSE IF, ELSE
  
  int age = 17;
  
  if (age < 18) {           //Eger yas 18 den kücük ise blok calisir yoksa calismadan devam eder.
    printf("Yas 18 den kücüktür");
  }else if(age ==18) {      // 18 e esit olma durumunda bu blok calisir.
    printf("Yas 18 dir")
  }
    else{                   //Diger kosullarda bu blok calisacaktir.
    printf("Yas 18 den büyüktür");
  }
  
  
  SWITCH-CASE
  
  int sayi=1;
  
  switch(sayi){
  case 1:
    printf("sayimiz 1 dir.");
    break;
  case 2:  
    printf("sayimiz 2 dir.");
    break;
  default:
     printf("INVALID");
  }  
  
DÖNGÜLER

  WHILE
  
  int i = 0;
  while (i < 5){
    printf("i : %d\n", i);
    i++;
  }

  FOR
  
  int i;
  
  for (i=0; i<10; i++){
     printf("i : %d\n", i);
  }
  
  
  *BREAK
  
  int i=0;
  while(1){                               //true oldugu müddetce devam edecek.
    printf("i : %d\n", i);
    i++;
    if(i==5)
      printf("Döngüden cikiliyor.");
      break;                             // i=5 oldugunda döngüyü bitirecektir.     
  }
  
  
  *CONTINUE
  
  int i=0;
  while(i<10){
    if(i==2||i==5){              
      i++;
      continue;                      Eger 2 veya 5 olursa (yazdirmadan) basa dön!
    }
    printf("i : %d\n", i);
    i++;
  }
  
ARRAYS

  birden fazla degeri depolamak istersek array leri kullanmamiz gerekir.
  ARRAY ismi ozel bir kelime oldugu icin isim olarak kullanilamaz!
  bir array in INDEX i her zaman 0 dan baslar.
  
  int dizi[] = {10,20,30,40};
  
  eger ücüncü elemanini yazdirmak istersek;
  
  printf("%d", dizi[2]);        //30
  
  Eger bir Aray i yazdirmak istersek;
  
  int i;
  for(i=0; i<4; i++){
    printf("ELEMAN : %d\n", dizi[i]);
  }
  
  Eger kullanicidan bir array almak istersek;
  öncelikle array in hacmini ve adini belirlemeliyiz.
  
  int dizi[4];
  int i;
  for(i=0, i<4, i++){
    prinf("Yeni Array Degeri: ");
    scanf_s("%d", &dizi[i]); 
  }                                 //eger yazdirmak istersek bir adim yukarisina bak!
  
  Eger dizideki rakamlarin toplamini istersek;
  
  int dizi[] = {10,20,30,40};
  int i;
  int toplam=0;
  for (i=0; i<4; i++){
    toplam+= dizi[i];
  }
  printf("Toplam :  %d", toplam);
  
KARAKTER DIZILERI VEYA STRINGLER

